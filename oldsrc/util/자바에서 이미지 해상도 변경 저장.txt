import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
 
import javax.imageio.ImageIO;
 
public class ImageResizeTest {
    public static void main(String[] args) {
        try{
            String imgOriginalPath= "C:/yjs/test.jpg";           // 원본 이미지 파일명
            String imgTargetPath= "C:/yjs/test_resize.jpg";    // 새 이미지 파일명
            String imgFormat = "jpg";                             // 새 이미지 포맷. jpg, gif 등
            int newWidth = 600;                                  // 변경 할 넓이
            int newHeigt = 700;      
 
            // 원본 이미지 가져오기
            Image image = ImageIO.read(new File(imgOriginalPath));
  
            // 이미지 리사이즈
            // Image.SCALE_DEFAULT : 기본 이미지 스케일링 알고리즘 사용
            // Image.SCALE_FAST    : 이미지 부드러움보다 속도 우선
            // Image.SCALE_REPLICATE : ReplicateScaleFilter 클래스로 구체화 된 이미지 크기 조절 알고리즘
            // Image.SCALE_SMOOTH  : 속도보다 이미지 부드러움을 우선
            // Image.SCALE_AREA_AVERAGING  : 평균 알고리즘 사용
             
            Image resizeImage = image.getScaledInstance(newWidth, newHeigt, Image.SCALE_SMOOTH);
  
            // 새 이미지  저장하기
            BufferedImage newImage = new BufferedImage(newWidth, newHeigt, BufferedImage.TYPE_INT_RGB);
            Graphics g = newImage.getGraphics();
            g.drawImage(resizeImage, 0, 0, null);
            g.dispose();
            ImageIO.write(newImage, imgFormat, new File(imgTargetPath));
             
        }catch (Exception e){
            e.printStackTrace();
        }
    }
}



///////////////////////////////////////////////
이미지 회전

1. dependency 추가.

<!-- image EXIF read -->
<dependency>
	<groupId>com.drewnoakes</groupId>
	<artifactId>metadata-extractor</artifactId>
	<version>2.9.1</version>
</dependency>
</dependencies>
2. java 코드 수정

private void makeThumbnail(String filePath, String fileName, String fileExt) throws Exception {
	int maxWidth = 250, maxHeight = 250; // 썸네일 가로 세로 사이즈
 
	//파일을 읽는다.
	File imageFile = new File(filePath);
 
	// 원본 파일의 Orientation 정보를 읽는다.
	int orientation = 1; // 회전정보, 1. 0도, 3. 180도, 6. 270도, 8. 90도 회전한 정보
	int width = 0; // 이미지의 가로폭
	int height = 0; // 이미지의 세로높이
 
	Metadata metadata; // 이미지 메타 데이터 객체
	Directory directory; // 이미지의 Exif 데이터를 읽기 위한 객체
	JpegDirectory jpegDirectory; // JPG 이미지 정보를 읽기 위한 객체
 
	try {
		metadata = ImageMetadataReader.readMetadata(imageFile);
		directory = metadata.getFirstDirectoryOfType(ExifIFD0Directory.class);
		jpegDirectory = metadata.getFirstDirectoryOfType(JpegDirectory.class);
		if(directory != null){
			orientation = directory.getInt(ExifIFD0Directory.TAG_ORIENTATION); // 회전정보
		}
 
	}catch (Exception e) {
		orientation=1;
	}
 
	//imageFile
	BufferedImage srcImg = ImageIO.read(imageFile);
	// 회전 시킨다.
	switch (orientation) {
	case 6:
		srcImg = Scalr.rotate(srcImg, Scalr.Rotation.CW_90, null); 
		break;
	case 1:
 
		break;
	case 3:
		srcImg = Scalr.rotate(srcImg, Scalr.Rotation.CW_180, null);
		break;
	case 8:
		srcImg = Scalr.rotate(srcImg, Scalr.Rotation.CW_270, null);
		break;
 
	default:
		orientation=1;
		break;
	}
 
	BufferedImage destImg = Scalr.resize(srcImg, maxWidth, maxHeight);
	// 썸네일을 생성하여 저장, 파일명 뒤에 _THUMB 추가
	String thumbName = filePath + "_THUMB" ;
	File thumbFile = new File(thumbName);
	ImageIO.write(destImg, fileExt.toUpperCase(), thumbFile);
}