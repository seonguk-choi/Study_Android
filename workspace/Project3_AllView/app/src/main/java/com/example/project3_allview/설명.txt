1.TabMenu <- + Fragment
-1.Appbar에 Tab이 들어감 Appbar는 항상 부모CoordinatorLayout 가져아한다.
-Appbar안에다가 Tablayout넣음 -> 자바코드 필요함
-2.TabLayout에 item을 추가하는 방법
-먼저 TabLayout을 자바코드에서 찾아서 사용할 준비를 해놓고
그다음 > addTab이라는 메소드를 사용한다.

2.ViewPager
- ↓ Adpater 가 반드시 필요함 , 탭이랑 기능은 비슷하지만 화면이 넘어가는 처리가
사용자에게 보이기 때문에 디자인적인 요소로는 더 좋은 부분이 약간 있음(오류,버그)
(광고 배너 , 슬라이드 이미지 .. )

3.※ ListView , GridView , RecyclerView(※)
-모든 View(목록을 가진)들은 Adapter라는 데이터 연결부가 필요하다.
    -GridView : 격자형으로 아이템들을 보여주기 위한 View
    listSelector : 선택 된 아이템을 어떤색으로 바꿀껀지. (색)
    numColumns : 몇칸으로 나눌건지
    vertivalSpacing : 공간을 띄어놓는다면 어느정도 dp를 줄껀지.
- Adapter를 설정할때 필요한것들
(Adapter -> getView ( 디자인 <-> java)
    Context <- Activity나 화면의 제어권을 가진 객체
    ↑ Fragment까지는 getActivity (화면단에 서로 떠있기때문에 유기적인 관계있음)
    ↑ class <- 일반클래스
    Adapter를 구성하는 ArrayList<Item> ※
    LayoutInflater <-화면을 직접 커스터마이징해서 만들었다면 화면을 붙일수있는
    inflate기능이 필요함. ※






etc.Fragment
-1.Fragment는 Activity처럼 새로운 화면을 띄우는게 아니라 Activity의 레이아웃에 inflate되는
View이다.
-2.Fragment와 Fragment.xml(디자인)을 연결할때는 setContentView가 아니라 ViewGroup자체를
만들어서 연결을 시키고 return을 연결된 ViewGroup을 해줘야함.
-3.Fragment의 디자인에 있는 widget을 연결할때는 만든 ViewGroup(rootView)를 통해서 find해야
한다.
-4.Activity에서 Fragment를 붙일때는 붙을 레이아웃 하나를 준비(FrameLayout)하고
getSupportFragmentManager를 이용 begin>replace>commit의 기능이 필요함.